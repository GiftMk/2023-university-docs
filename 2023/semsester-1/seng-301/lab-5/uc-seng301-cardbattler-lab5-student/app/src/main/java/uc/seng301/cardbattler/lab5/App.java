/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uc.seng301.cardbattler.lab5;

import java.util.logging.Level;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import uc.seng301.cardbattler.lab5.model.Card;
import uc.seng301.cardbattler.lab5.model.Deck;
import uc.seng301.cardbattler.lab5.model.Player;

public class App {
    private static SessionFactory sessionFactory;

    public App() {
        // this will load the config file (hibernate.cfg.xml in resources folder)
        Configuration configuration = new Configuration();
        configuration.configure();
        sessionFactory = configuration.buildSessionFactory();
    }

    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public static void main(String[] args) {
        // removes almost all the annoying hibernate INFO log messages, it seems to
        // properly handle these we need Log4J
        java.util.logging.Logger.getLogger("org.hibernate").setLevel(Level.SEVERE);
        new App();

        Player player = new Player();
        player.setName("Jane");

        Deck deck = new Deck();
        deck.setName("Jane's First Deck");
        deck.setPlayer(player);

        Card goliath = new Card();
        goliath.setName("Goliath");
        goliath.setAttack(50);
        goliath.setDefence(40);
        goliath.setLife(120);
        goliath.setDeck(deck);

        Card minotaur = new Card();
        minotaur.setName("Minotaur");
        minotaur.setAttack(60);
        minotaur.setDefence(30);
        minotaur.setLife(80);
        minotaur.setDeck(deck);

        Transaction transaction = null;
        Long playerId = -1L;
        try (Session session = sessionFactory.openSession()) {
            System.out.println("Persisting a player with deck of cards");
            transaction = session.beginTransaction();
            session.persist(player);
            playerId = player.getPlayerId();
            session.persist(deck);
            session.persist(goliath);
            session.persist(minotaur);
            // persist into the database
            transaction.commit();
        } catch (HibernateException e) {
            System.err.println("Unable to open session or transaction");
            e.printStackTrace();
            if (transaction != null) {
                transaction.rollback();
            }
        }

        try (Session session = sessionFactory.openSession()) {
            System.out.println("Retrieving player with id: " + playerId);
            // note that HQL queries use the Java attributes names, i.e. eventId and not
            // id_event (table column)
            Player retrievedPlayer = session.createQuery("FROM Player WHERE playerId =" + playerId, Player.class)
                    .uniqueResult();
            System.out.println(retrievedPlayer);
        } catch (HibernateException e) {
            System.err.println("Unable to open session or transaction");
            e.printStackTrace();
        }

    }
}
